

--server.js

  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  //import express package
  // import express from 'express'; 
  var express = require("express"); //  star tells typescript that there is no defult properties in the installed package, need the whole package.
  console.log(express);
--

--Notes

  --index.ejs
  <!-- <%= content %>  This  '<%='  won't render html tags coded in --> * compiled with error, even though it's been commented out. 

  --Docker, MongoDB, MongoDB Compass, Driver Libraries: ex. Mongoose.  
    - In order to connect to the database you need a client program, such as MongoDB Compass

    - npm mongodb 
      - this command installs a node driver. nothing to do with mongodb server.
      - makes communicating with the server easier.
--

--server.ts
  
  /**Demonstrating an unneccesary two step process for
    * with 'tsnd' don't need to compile => run , can just run. */
    //import express package
    // import * as express from 'express';  star tells typescript that there is no defult properties in the installed package, need the whole package.
    // console.log(express);
    //import express variable to invoke express API.
  // -----------------------------------------------

  // 'import' statement deprecated OR some other configuration issue. 

  //import os from 'express' // for using in script, not in the debug console. 


  //'config' is default export, 'PORT' is named export. 
  import config, {PORT} from  './config';
  console.log(PORT); 

  import express from 'express'; 
  //import config from './config';

  const os = require('node:os');

  // console.log(config());
  console.log(config);


  const server = express();

  //Middleware  - a layer so everytime there is a express goes through all layors to determine valid requests and what to do with it. 
  server.use(express.static("dist")); // serve any static assets under the 'dist' directory.

  //tell Express to use ejs as templating library.
  //& configures ejs as the 'view engine' of the project. 
  server.set("view engine", "ejs"); // set special string 'view engine' to be 'ejs'.
  
  server.use("/", (req,res) => {
    res.render("index", {
      initialContent: "EJS is <em>cool!</em>" // '<%=' won't render HTML, use '<%-' instead. 
    }); // give the name of the templating file to look for. 
    // res.send("Hello from Express"); // Displays text, not HTML in browser. 
  });

  server.listen(config.PORT, config.HOST, ()=>{
    console.info(
      `Express server is listening at ${config.SERVER_URL} \n`,
      `Free Mem: ${os.freemem() / 1024 / 1024}`
    )
  })
  // server.listen("8080", "localhost", () => {
  //   console.info(
  //     "Express server is listening at http://localhost:8080",
  //     ``
  //   );
  // })
--

--index.tsx 
  return (
    <React.Fragment>
      <h1>Hello react</h1>
      <h2>With JSX</h2>

        {/*Tab9 AI - generated <ul>
          {TODOS.map(todo => <li key={todo}>{todo}</li>)}
        </ul> */}

        {TODOS.map(element => {return <li key={element}>{element}</li>})
        }
  )
    </React.Fragment>
--

